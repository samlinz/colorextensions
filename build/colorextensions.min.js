/*! colorextensions 1.0.0, built on Fri Sep 13 2019 11:49:03 GMT+0300 (Eastern European Summer Time) */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/colorextensions.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/colorextensions.js":
/*!********************************!*\
  !*** ./src/colorextensions.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

window.ColorExtensions = function () {
  var COLOR_TYPES = {
    Object: "object",
    HexShort: "hex_short",
    HexLong: "hex_long",
    RGB: "rgb"
  };
  var RGB_PROPERTIES = ["r", "g", "b"];
  var RGB_REGEX = /rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;

  function isRgbInValidRange(_int) {
    return _int >= 0 && _int <= 255;
  }

  alert('hello world!');

  function validateRgbObject(obj) {
    if (RGB_PROPERTIES.some(function (prop) {
      return !(prop in obj);
    })) throw Error("Object ".concat(JSON.stringify(obj), " does not include required properties"));
  }
  /**
   * Convert color as hex string to object with rgb integer properties.
   * @param {string} hex Color as hexadecimal string, short or long form.
   */


  function hexToObj(hex) {
    if (typeof hex !== "string") throw Error("".concat(hex, " is not string"));
    var hexStr = hex.slice(); // Remove the prefix if present.

    if (hexStr[0] === "#") hexStr = hexStr.substr(1);
    var hexLen = hexStr.length; // Check if the hex string is short or long form.

    var shortForm = null;
    if (hexLen === 3) shortForm = true;else if (hexLen === 6) shortForm = false;else throw Error("Invalid length for hex string ".concat(hexLen));
    var result = {
      r: null,
      g: null,
      b: null
    };
    var charsPerColor = shortForm ? 1 : 2;

    for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      var colorStr = hexStr.substr(0, charsPerColor);
      hexStr = hexStr.substr(charsPerColor);

      if (colorStr.length === 1) {
        colorStr = colorStr.repeat(2);
      }

      var colorInt = parseInt(colorStr, 16);

      if (Number.isNaN(colorInt)) {
        throw Error("Failed to convert string ".concat(colorStr, " to integer"));
      }

      result[key] = colorInt;
    }

    return result;
  }
  /**
   * Convert RGB object to hex string.
   *
   * @param {object} obj Object with r, g, b properties.
   * @param {object?} options
   */


  function objToHex(obj, options) {
    var optShortForm = options && options.shortForm;
    var optPrefix = options && options.prefix ? options.prefix : true;
    var result = optPrefix ? "#" : "";
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = RGB_PROPERTIES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var property = _step.value;
        var colorInt = +obj[property];
        if (!isRgbInValidRange(colorInt)) throw Error("Color is not valid rgb ".concat(colorInt));
        var colorHex = colorInt.toString(16);
        if (colorHex.length === 1) colorHex = "0".concat(colorHex);
        result += colorHex;
      } // Convert hex string to short form if possible.

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (optShortForm) {
      var hexWithoutPrefix = optPrefix ? result.substr(1) : result.slice();
      var resultShort = optPrefix ? "#" : "";

      for (var i = 0; i < 3; i++) {
        // Verify that color can be reprented in short form.
        if (hexWithoutPrefix[i * 2] !== hexWithoutPrefix[i * 2 + 1]) {
          resultShort = null;
          break;
        }

        resultShort += hexWithoutPrefix[i * 2];
      }

      result = resultShort || result;
    }

    return result;
  }
  /**
   * Convert RGB string to RGB object.
   * @param {string} rgb RGB string.
   */


  function rgbToObj(rgb) {
    var matches = RGB_REGEX.exec(rgb);
    if (!matches) throw Error("Could not parse rgb ".concat(rgb));
    if (matches.length !== 4) throw Error("Invalid number of matched groups");
    return {
      r: matches[1],
      g: matches[2],
      b: matches[3]
    };
  }
  /**
   * Convert RGB object to rgb string.
   * @param {object} obj RGB object.
   */


  function objToRgb(obj, options) {
    var optAlpha = options && options.alpha || null;
    validateRgbObject(obj);
    var prefix = optAlpha !== null ? "rgba" : "rgb";
    return "".concat(prefix, "(").concat(obj["r"], ",").concat(obj["g"], ",").concat(obj["b"]).concat(optAlpha ? ",".concat(optAlpha) : "", ")");
  }
  /**
   * Convert hex string to RGB string.
   * @param {string} hex Hex string.
   * @param {object?} options
   */


  function hexToRgb(hex, options) {
    return objToRgb(hexToObj(hex), options);
  }
  /**
   * Convert RGB string to hex string.
   * @param {string} rgb RGB string.
   * @param {object?} options
   */


  function rgbToHex(rgb, options) {
    return objToHex(rgbToObj(rgb), options);
  }

  function getColorType(value) {
    var isValidHexLenght = function isValidHexLenght(val) {
      return val.length === 3 || val.length === 6;
    };

    var handleHex = function handleHex(val) {
      if (val.length === 3) return COLOR_TYPES["HexShort"];
      if (val.length === 6) return COLOR_TYPES["HexLong"];
    }; // Check if value is object.-


    if (_typeof(value) === "object") {
      if (RGB_PROPERTIES.every(function (p) {
        return p in value;
      })) {
        return COLOR_TYPES["Object"];
      }

      throw Error("Value was object but was missing required properties");
    }

    if (typeof value !== "string") {
      throw Error("Value was not string");
    } // Check if hex starting with hash.


    if (value.startsWith("#")) {
      var colorValues = value.substr(1);

      if (!isValidHexLenght(colorValues)) {
        throw Error("Value started with hash but had invalid number of color values");
      }

      var _hexType = handleHex(colorValues);

      if (_hexType) return _hexType;
    } // Check if value is RGB.


    if (value.startsWith("rgb")) {
      if (!RGB_REGEX.test(value)) throw Error("Value started with rgb but had invalid form");
      return COLOR_TYPES["RGB"];
    } // Value has to be hex without prefix.


    var hexType = handleHex(value);
    if (hexType) return hexType;
    throw Error("Couldn't determine the color type of the value");
  }

  function convertTo(value, convertToType, options) {
    var type = getColorType(value);

    if (type.startsWith("hex")) {
      // Hex to rgb.
      if (convertToType === COLOR_TYPES["RGB"]) return hexToRgb(value, options); // Hex to object.

      if (convertToType === COLOR_TYPES["Object"]) return hexToObj(value); // Convert hex to hex.

      var obj = hexToObj(value);
      return objToHex(obj, {
        shortForm: convertToType === COLOR_TYPES["HexShort"]
      });
    }

    if (type === COLOR_TYPES["RGB"]) {
      // Rgb to hex.
      if (convertToType.startsWith("hex")) {
        return rgbToHex(value, {
          shortForm: convertToType === COLOR_TYPES["HexShort"]
        });
      } // Rgb to object.


      if (convertToType === COLOR_TYPES["Object"]) return rgbToObj(value); // Rgb to rgb.

      var _obj = rgbToObj(value);

      return objToRgb(_obj, options);
    }

    if (type === COLOR_TYPES["Object"]) {
      if (convertToType.startsWith("hex")) return objToHex(value, options);
      if (convertToType === COLOR_TYPES["RGB"]) return objToRgb(value);
      return value;
    }

    throw Error("Invalid type for the input value");
  }
  /**
   * Class which holds start and end color values and can produce any
   * color between those values.
   */


  var ColorInterpolator =
  /*#__PURE__*/
  function () {
    function ColorInterpolator(colormap) {
      _classCallCheck(this, ColorInterpolator);

      this.type = getColorType(start);
      this.start = convertTo(start, COLOR_TYPES["Object"]);
      this.stop = convertTo(stop, COLOR_TYPES["Object"]);
      this.rangeR = +this.stop["r"] - +this.start["r"];
      this.rangeG = +this.stop["g"] - +this.start["g"];
      this.rangeB = +this.stop["b"] - +this.start["b"];
    }
    /**
     * Return a color between the start and stop colors.
     *
     * @param {number} fraction Fraction between 0 and 1.
     * @param {string} type If present return the interpolated color in this format.
     */


    _createClass(ColorInterpolator, [{
      key: "getColor",
      value: function getColor(fraction) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (typeof fraction !== "number") {
          throw Error("Invalid fraction ".concat(fraction));
        }

        if (fraction < 0 || fraction > 1) {
          throw Error("Fraction out of range ".concat(fraction));
        } // Calculate the new values between the provided start and end values.


        var r = +this.start["r"] + fraction * this.rangeR | 0;
        var g = +this.start["g"] + fraction * this.rangeG | 0;
        var b = +this.start["b"] + fraction * this.rangeB | 0;
        var colorObj = {
          r: r,
          g: g,
          b: b
        }; // Convert object to either the original or provided color type.

        return convertTo(colorObj, type || this.type);
      }
    }]);

    return ColorInterpolator;
  }();

  function interpolateColor(start, end, fraction) {
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var interpolator = new ColorInterpolator(start, end);
    return interpolator.getColor(fraction, type);
  } // Return public API.


  return {
    hexToObj: hexToObj,
    objToHex: objToHex,
    objToRgb: objToRgb,
    hexToRgb: hexToRgb,
    rgbToHex: rgbToHex,
    convertTo: convertTo,
    ColorInterpolator: ColorInterpolator
  };
}();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,